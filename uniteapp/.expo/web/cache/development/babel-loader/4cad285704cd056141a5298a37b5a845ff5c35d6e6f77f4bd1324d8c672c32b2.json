{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\nvar AppEventsLogger = require('react-native').NativeModules.FBAppEventsLogger;\nvar Platform = require(\"react-native-web/dist/exports/Platform\").default;\nmodule.exports = {\n  setFlushBehavior: function setFlushBehavior(flushBehavior) {\n    AppEventsLogger.setFlushBehavior(flushBehavior);\n  },\n  logEvent: function logEvent(eventName) {\n    var valueToSum = 0;\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    if (typeof args[0] === 'number') {\n      valueToSum = args.shift();\n    }\n    var parameters = null;\n    if (typeof args[0] === 'object') {\n      parameters = args[0];\n    }\n    AppEventsLogger.logEvent(eventName, valueToSum, parameters);\n  },\n  logPurchase: function logPurchase(purchaseAmount, currencyCode, parameters) {\n    AppEventsLogger.logPurchase(purchaseAmount, currencyCode, parameters);\n  },\n  logPushNotificationOpen: function logPushNotificationOpen(payload) {\n    AppEventsLogger.logPushNotificationOpen(payload);\n  },\n  flush: function flush() {\n    AppEventsLogger.flush();\n  },\n  setUserID: function setUserID(userID) {\n    AppEventsLogger.setUserID(userID);\n  },\n  getUserID: function getUserID() {\n    return function _callee() {\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(AppEventsLogger.getUserID());\n          case 2:\n            return _context.abrupt(\"return\", _context.sent);\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  getAnonymousID: function getAnonymousID() {\n    return function _callee2() {\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(AppEventsLogger.getAnonymousID());\n          case 2:\n            return _context2.abrupt(\"return\", _context2.sent);\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  getAdvertiserID: function getAdvertiserID() {\n    return function _callee3() {\n      return _regeneratorRuntime.async(function _callee3$(_context3) {\n        while (1) switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return _regeneratorRuntime.awrap(AppEventsLogger.getAdvertiserID());\n          case 2:\n            return _context3.abrupt(\"return\", _context3.sent);\n          case 3:\n          case \"end\":\n            return _context3.stop();\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  getAttributionID: function getAttributionID() {\n    return function _callee4() {\n      return _regeneratorRuntime.async(function _callee4$(_context4) {\n        while (1) switch (_context4.prev = _context4.next) {\n          case 0:\n            if (!(Platform.OS === 'ios')) {\n              _context4.next = 2;\n              break;\n            }\n            return _context4.abrupt(\"return\", null);\n          case 2:\n            _context4.next = 4;\n            return _regeneratorRuntime.awrap(AppEventsLogger.getAttributionID());\n          case 4:\n            return _context4.abrupt(\"return\", _context4.sent);\n          case 5:\n          case \"end\":\n            return _context4.stop();\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  updateUserProperties: function updateUserProperties(parameters) {\n    AppEventsLogger.updateUserProperties(parameters);\n  },\n  setUserData: function setUserData(userData) {\n    AppEventsLogger.setUserData(userData);\n  },\n  setPushNotificationsDeviceToken: function setPushNotificationsDeviceToken(deviceToken) {\n    AppEventsLogger.setPushNotificationsDeviceToken(deviceToken);\n  },\n  setPushNotificationsRegistrationId: function setPushNotificationsRegistrationId(registrationId) {\n    AppEventsLogger.setPushNotificationsRegistrationId(registrationId);\n  }\n};","map":{"version":3,"names":["_regeneratorRuntime","require","AppEventsLogger","NativeModules","FBAppEventsLogger","Platform","default","module","exports","setFlushBehavior","flushBehavior","logEvent","eventName","valueToSum","_len","arguments","length","args","Array","_key","shift","parameters","logPurchase","purchaseAmount","currencyCode","logPushNotificationOpen","payload","flush","setUserID","userID","getUserID","_callee","async","_callee$","_context","prev","next","awrap","abrupt","sent","stop","Promise","getAnonymousID","_callee2","_callee2$","_context2","getAdvertiserID","_callee3","_callee3$","_context3","getAttributionID","_callee4","_callee4$","_context4","OS","updateUserProperties","setUserData","userData","setPushNotificationsDeviceToken","deviceToken","setPushNotificationsRegistrationId","registrationId"],"sources":["C:\\Users\\This_user\\final project eti\\uniteapp\\node_modules\\react-native-fbsdk\\lib\\module\\FBAppEventsLogger.js"],"sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.\n *\n * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,\n * copy, modify, and distribute this software in source code or binary form for use\n * in connection with the web services and APIs provided by Facebook.\n *\n * As with any software that integrates with the Facebook platform, your use of\n * this software is subject to the Facebook Developer Principles and Policies\n * [http://developers.facebook.com/policy/]. This copyright notice shall be\n * included in all copies or substantial portions of the software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n *\n * @flow\n * @format\n */\n'use strict';\n\nconst AppEventsLogger = require('react-native').NativeModules.FBAppEventsLogger;\nconst {Platform} = require('react-native');\n/**\n * Controls when an AppEventsLogger sends log events to the server\n */\ntype AppEventsFlushBehavior =\n  /**\n   * Flush automatically: periodically (every 15 seconds or after every 100 events), and\n   * always at app reactivation. This is the default value.\n   */\n  | 'auto'\n  /**\n   * Only flush when AppEventsLogger.flush() is explicitly invoked.\n   */\n  | 'explicit_only';\ntype Params = {[key: string]: string | number};\n\n/**\n * Info about a user to increase chances of matching a Facebook user.\n * See https://developers.facebook.com/docs/app-events/advanced-matching for\n * more info about the expected format of each field.\n */\ntype UserData = $ReadOnly<{|\n  email?: ?string,\n  firstName?: ?string,\n  lastName?: ?string,\n  phone?: ?string,\n  dateOfBirth?: ?string,\n  gender?: ?('m' | 'f'),\n  city?: ?string,\n  state?: ?string,\n  zip?: ?string,\n  country?: ?string,\n|}>;\n\nmodule.exports = {\n  /**\n   * Sets the current event flushing behavior specifying when events\n   * are sent back to Facebook servers.\n   */\n  setFlushBehavior(flushBehavior: AppEventsFlushBehavior) {\n    AppEventsLogger.setFlushBehavior(flushBehavior);\n  },\n\n  /**\n   * Logs an event with eventName and optional arguments.\n   * This function supports the following usage:\n   * logEvent(eventName: string);\n   * logEvent(eventName: string, valueToSum: number);\n   * logEvent(eventName: string, parameters: {[key:string]:string|number});\n   * logEvent(eventName: string, valueToSum: number, parameters: {[key:string]:string|number});\n   * See https://developers.facebook.com/docs/app-events/android for detail.\n   */\n  logEvent(eventName: string, ...args: Array<number | Params>) {\n    let valueToSum = 0;\n    if (typeof args[0] === 'number') {\n      valueToSum = args.shift();\n    }\n    let parameters = null;\n    if (typeof args[0] === 'object') {\n      parameters = args[0];\n    }\n    AppEventsLogger.logEvent(eventName, valueToSum, parameters);\n  },\n\n  /**\n   * Logs a purchase. See http://en.wikipedia.org/wiki/ISO_4217 for currencyCode.\n   */\n  logPurchase(\n    purchaseAmount: number,\n    currencyCode: string,\n    parameters?: ?Params,\n  ) {\n    AppEventsLogger.logPurchase(purchaseAmount, currencyCode, parameters);\n  },\n\n  /**\n   * Logs an app event that tracks that the application was open via Push Notification.\n   */\n  logPushNotificationOpen(payload: ?Object) {\n    AppEventsLogger.logPushNotificationOpen(payload);\n  },\n\n  /**\n   * Explicitly kicks off flushing of events to Facebook.\n   */\n  flush() {\n    AppEventsLogger.flush();\n  },\n\n  /**\n   * Sets a custom user ID to associate with all app events.\n   * The userID is persisted until it is cleared by passing nil.\n   */\n  setUserID(userID: string | null) {\n    AppEventsLogger.setUserID(userID);\n  },\n\n  /**\n   * Returns user id or null if not set\n   */\n  async getUserID(): Promise<?string> {\n    return await AppEventsLogger.getUserID();\n  },\n\n  /**\n   * Returns anonymous id or null if not set\n   */\n  async getAnonymousID(): Promise<?string> {\n    return await AppEventsLogger.getAnonymousID();\n  },\n\n  /**\n   * Returns advertiser id or null if not set\n   */\n  async getAdvertiserID(): Promise<?string> {\n    return await AppEventsLogger.getAdvertiserID();\n  },\n\n  /**\n   * Returns advertiser id or null if not set.\n   * @platform android\n   */\n  async getAttributionID(): Promise<?string> {\n    if (Platform.OS === 'ios') {\n      return null;\n    }\n    return await AppEventsLogger.getAttributionID();\n  },\n\n  /**\n   * Sends a request to update the properties for the current user, set by\n   * setUserID. You must call setUserID before making this call.\n   */\n  updateUserProperties(parameters: Params) {\n    AppEventsLogger.updateUserProperties(parameters);\n  },\n\n  /**\n   * Set additional data about the user to increase chances of matching a Facebook user.\n   */\n  setUserData(userData: UserData) {\n    AppEventsLogger.setUserData(userData);\n  },\n\n  /**\n   * For iOS only, sets and sends device token to register the current application for push notifications.\n   * @platform ios\n   */\n  setPushNotificationsDeviceToken(deviceToken: string) {\n    AppEventsLogger.setPushNotificationsDeviceToken(deviceToken);\n  },\n\n  /**\n   * For Android only, sets and sends registration id to register the current app for push notifications.\n   * @platform Android\n   */\n  setPushNotificationsRegistrationId(registrationId: string) {\n    AppEventsLogger.setPushNotificationsRegistrationId(registrationId);\n  },\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}