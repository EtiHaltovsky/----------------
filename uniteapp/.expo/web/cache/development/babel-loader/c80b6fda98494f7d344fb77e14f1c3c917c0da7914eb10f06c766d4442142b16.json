{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Table = function Table() {\n  var N = 5;\n  var _useState = useState(Array(N).fill(Array(N).fill(0))),\n    _useState2 = _slicedToArray(_useState, 2),\n    matrix = _useState2[0],\n    setMatrix = _useState2[1];\n  var handleInputChange = function handleInputChange(value, row, col) {\n    var updatedMatrix = matrix.map(function (rowArray, i) {\n      return i === row ? rowArray.map(function (cell, j) {\n        return j === col ? parseInt(value) || 0 : cell;\n      }) : rowArray;\n    });\n    setMatrix(updatedMatrix);\n  };\n  var computeIndices = function computeIndices() {};\n  return _jsxs(View, {\n    children: [_jsx(Text, {\n      children: \"Total Cost: \"\n    }), _jsx(TextInput, {\n      value: computeIndices().toString(),\n      editable: false\n    }), _jsx(Text, {\n      children: \"Indices: \"\n    }), _jsx(View, {\n      style: {\n        flexDirection: 'row'\n      },\n      children: matrix.map(function (row, i) {\n        return _jsx(View, {\n          style: {\n            flexDirection: 'column'\n          },\n          children: row.map(function (cell, j) {\n            return _jsx(TextInput, {\n              value: cell.toString(),\n              onChangeText: function onChangeText(value) {\n                return handleInputChange(value, i, j);\n              },\n              style: {\n                borderWidth: 1,\n                borderColor: '#000',\n                width: 50,\n                height: 30,\n                padding: 5\n              }\n            }, j);\n          })\n        }, i);\n      })\n    })]\n  });\n};\nexport default Table;","map":{"version":3,"names":["React","useState","View","Text","TextInput","jsx","_jsx","jsxs","_jsxs","Table","N","_useState","Array","fill","_useState2","_slicedToArray","matrix","setMatrix","handleInputChange","value","row","col","updatedMatrix","map","rowArray","i","cell","j","parseInt","computeIndices","children","toString","editable","style","flexDirection","onChangeText","borderWidth","borderColor","width","height","padding"],"sources":["C:/Users/This_user/final project eti/uniteapp/components/Table.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { View, Text, TextInput } from 'react-native';\r\n\r\nconst Table = () => {\r\n  const N = 5;\r\n  const [matrix, setMatrix] = useState(Array(N).fill(Array(N).fill(0)));\r\n\r\n  const handleInputChange = (value, row, col) => {\r\n    const updatedMatrix = matrix.map((rowArray, i) =>\r\n      i === row ? rowArray.map((cell, j) => (j === col ? parseInt(value) || 0 : cell)) : rowArray\r\n    );\r\n    setMatrix(updatedMatrix);\r\n  };\r\n\r\n  //פונקציה של חישוב האילוצים-המ\r\n  const computeIndices = () => {\r\n    \r\n    // Implement your logic here to compute indices using the Munkres algorithm\r\n    // You can refer to the original JavaScript code provided for reference\r\n    // Make use of the 'matrix' state variable\r\n  };\r\n\r\n  return (\r\n    <View>\r\n      <Text>Total Cost: </Text>\r\n      <TextInput value={computeIndices().toString()} editable={false} />\r\n      \r\n      <Text>Indices: </Text>\r\n      {/* <TextInput value={computeIndices().toString()} editable={false} /> */}\r\n\r\n      <View style={{ flexDirection: 'row' }}>\r\n        {matrix.map((row, i) => (\r\n          <View key={i} style={{ flexDirection: 'column' }}>\r\n            {row.map((cell, j) => (\r\n              <TextInput\r\n                key={j}\r\n                value={cell.toString()}\r\n                onChangeText={(value) => handleInputChange(value, i, j)}\r\n                style={{ borderWidth: 1, borderColor: '#000', width: 50, height: 30, padding: 5 }}\r\n              />\r\n            ))}\r\n          </View>\r\n        ))}\r\n      </View>\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default Table;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,SAAA;AAAA,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAGxC,IAAMC,KAAK,GAAG,SAARA,KAAKA,CAAA,EAAS;EAClB,IAAMC,CAAC,GAAG,CAAC;EACX,IAAAC,SAAA,GAA4BV,QAAQ,CAACW,KAAK,CAACF,CAAC,CAAC,CAACG,IAAI,CAACD,KAAK,CAACF,CAAC,CAAC,CAACG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IAAAC,UAAA,GAAAC,cAAA,CAAAJ,SAAA;IAA9DK,MAAM,GAAAF,UAAA;IAAEG,SAAS,GAAAH,UAAA;EAExB,IAAMI,iBAAiB,GAAG,SAApBA,iBAAiBA,CAAIC,KAAK,EAAEC,GAAG,EAAEC,GAAG,EAAK;IAC7C,IAAMC,aAAa,GAAGN,MAAM,CAACO,GAAG,CAAC,UAACC,QAAQ,EAAEC,CAAC;MAAA,OAC3CA,CAAC,KAAKL,GAAG,GAAGI,QAAQ,CAACD,GAAG,CAAC,UAACG,IAAI,EAAEC,CAAC;QAAA,OAAMA,CAAC,KAAKN,GAAG,GAAGO,QAAQ,CAACT,KAAK,CAAC,IAAI,CAAC,GAAGO,IAAI;MAAA,CAAC,CAAC,GAAGF,QAAQ;IAAA,CAC7F,CAAC;IACDP,SAAS,CAACK,aAAa,CAAC;EAC1B,CAAC;EAGD,IAAMO,cAAc,GAAG,SAAjBA,cAAcA,CAAA,EAAS,CAK7B,CAAC;EAED,OACErB,KAAA,CAACN,IAAI;IAAA4B,QAAA,GACHxB,IAAA,CAACH,IAAI;MAAA2B,QAAA,EAAC;IAAY,CAAM,CAAC,EACzBxB,IAAA,CAACF,SAAS;MAACe,KAAK,EAAEU,cAAc,CAAC,CAAC,CAACE,QAAQ,CAAC,CAAE;MAACC,QAAQ,EAAE;IAAM,CAAE,CAAC,EAElE1B,IAAA,CAACH,IAAI;MAAA2B,QAAA,EAAC;IAAS,CAAM,CAAC,EAGtBxB,IAAA,CAACJ,IAAI;MAAC+B,KAAK,EAAE;QAAEC,aAAa,EAAE;MAAM,CAAE;MAAAJ,QAAA,EACnCd,MAAM,CAACO,GAAG,CAAC,UAACH,GAAG,EAAEK,CAAC;QAAA,OACjBnB,IAAA,CAACJ,IAAI;UAAS+B,KAAK,EAAE;YAAEC,aAAa,EAAE;UAAS,CAAE;UAAAJ,QAAA,EAC9CV,GAAG,CAACG,GAAG,CAAC,UAACG,IAAI,EAAEC,CAAC;YAAA,OACfrB,IAAA,CAACF,SAAS;cAERe,KAAK,EAAEO,IAAI,CAACK,QAAQ,CAAC,CAAE;cACvBI,YAAY,EAAE,SAAAA,aAAChB,KAAK;gBAAA,OAAKD,iBAAiB,CAACC,KAAK,EAAEM,CAAC,EAAEE,CAAC,CAAC;cAAA,CAAC;cACxDM,KAAK,EAAE;gBAAEG,WAAW,EAAE,CAAC;gBAAEC,WAAW,EAAE,MAAM;gBAAEC,KAAK,EAAE,EAAE;gBAAEC,MAAM,EAAE,EAAE;gBAAEC,OAAO,EAAE;cAAE;YAAE,GAH7Eb,CAIN,CAAC;UAAA,CACH;QAAC,GAROF,CASL,CAAC;MAAA,CACR;IAAC,CACE,CAAC;EAAA,CACH,CAAC;AAEX,CAAC;AAED,eAAehB,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}